{"version":3,"file":"static/js/437.c1c62b68.chunk.js","mappings":"kMACA,EAA0D,sBAA1D,EAAyF,sB,SCU5EA,EAAUC,EAAAA,YAAiB,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,KACzCC,GAAYC,EAAAA,EAAAA,QAA0B,MAC5C,GAAiCC,EAAAA,EAAAA,aAAW,SAAAC,GAAC,OAAKA,KAAG,GAArD,eAAOC,EAAP,KAAiBC,EAAjB,KAMA,OAJAC,EAAAA,EAAAA,qBAAoBT,GAAK,iBAAO,CAC9BU,OAAQP,EAAUQ,WAChB,KAGF,iBAAKC,MAAO,CAAEC,OAAQ,OAAQC,SAAU,UAAxC,WACE,iBACEC,UAAS,UAAKH,EAAL,YAAqBL,EAAWK,EAAe,IACxDI,QAASR,EAFX,WAGE,SAACS,EAAA,EAAD,CAAMC,KAAK,aAAaC,YAAaZ,EAAW,EAAI,IACnDA,EAAWL,EAAO,OAErB,SAAC,IAAD,CACEU,MAAOQ,EAAAA,EACPC,SAAS,aACTC,iBAAe,EACfC,YAAa,CACXC,WAAY,0CACZC,SAAU,OACVC,SAAU,WACVC,WAAY,OACZC,IAAK,GACLC,KAAM,EACNC,MAAO,EACPC,OAAQ,EACRC,QAASzB,EAAW,EAAI,EACxB0B,cAAe1B,EAAW,QAAU,OACpC2B,WAAY,wBAfhB,SAiBGjC,KAEH,mBAAQD,IAAKG,UAKNgC,EAAa,SACxBC,EACAnC,EACAC,GAEA,IAAMF,GAAMI,EAAAA,EAAAA,QAAsC,MAElD,OADAiC,EAAAA,EAAAA,YAAU,kBAAMD,EAAUpC,EAAIW,QAASD,UAAS,KACzC,SAACZ,EAAD,CAASE,IAAKA,EAAKC,KAAMA,EAAMC,KAAMA,M,kDCvDxCkC,EAAY,SAAC1B,GAcjB,IAZA,IAEM4B,EAAS,IAAIC,EAAAA,kBAAyB,CAC1Cb,SAAU,IAAIa,EAAAA,QAAe,GAAI,GAAI,IACrCC,OAAQ,IAAID,EAAAA,QAAe,EAAG,EAAG,GACjCE,IAAK,KAEDC,EAAW,IAAIH,EAAAA,SAAgB,CAAE7B,OAAAA,EAAQ4B,OAAAA,IAEzCK,EAAS,kBAA8B,IAAvBC,KAAKD,SAAW,KAChCE,EAAuB,GAEpBC,EAAI,EAAGA,EAZG,IAYaA,IAAK,CACnC,IAAMC,EAAO,IAAIR,EAAAA,KAAY,CAC3BS,SAAU,IAAIT,EAAAA,aACdU,SAAU,IAAIV,EAAAA,iBAEhBQ,EAAKrB,SAASwB,IAAIP,IAAUA,IAAUA,KACtCI,EAAKI,SAASD,IAAIP,IAAUA,IAAUA,KACtCD,EAASU,MAAMC,IAAIN,GACnBF,EAAMS,KAAKP,GASb,OANAL,EAASa,UAAS,WAChBb,EAASU,MAAMD,SAASK,EAAIC,KAAKC,MAAQ,OAG3ChB,EAASiB,QAEF,WACLjB,EAASkB,OACTlB,EAASmB,YA6Cb,qBAAe,OAAM1B,EAAAA,EAAAA,GAAWC,EAxCtB,o9BAwCuC","sources":["webpack://athena-wiki/./src/components/Example/style.module.scss?46a9","components/Example/index.tsx","examples/rotating_cubes.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"style_wrapper__RowqQ\",\"button\":\"style_button__0wQan\",\"active\":\"style_active__pIfM9\"};","import React, { useReducer, useRef, useImperativeHandle, useEffect } from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { tomorrowNightBright } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { Icon } from '../Icon';\nimport style from './style.module.scss';\n\ninterface Props {\n  code: string;\n  name: string;\n}\n\nexport const Example = React.forwardRef(({ code, name }: Props, ref) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const [isActive, toggleActive] = useReducer(s => !s, false);\n\n  useImperativeHandle(ref, () => ({\n    canvas: canvasRef.current!\n  }), []);\n\n  return (\n    <div style={{ height: '100%', overflow: 'hidden' }}>\n      <div\n        className={`${style.button} ${isActive ? style.active : ''}`}\n        onClick={toggleActive}>\n        <Icon type=\"typescript\" marginRight={isActive ? 8 : 0} />\n        {isActive ? name : '' }\n      </div>\n      <SyntaxHighlighter\n        style={tomorrowNightBright}\n        language=\"typescript\"\n        showLineNumbers\n        customStyle={{ \n          fontFamily: 'Menlo, Monaco, \"Courier New\", monospace',\n          fontSize: '12px',\n          position: 'absolute',\n          lineHeight: '20px',\n          top: 24,\n          left: 0,\n          right: 0,\n          bottom: 0,\n          opacity: isActive ? 1 : 0,\n          pointerEvents: isActive ? 'unset' : 'none',\n          transition: 'all 0.3s ease-in-out',\n        }}>\n        {code}\n      </SyntaxHighlighter>\n      <canvas ref={canvasRef} />\n    </div>\n  );\n});\n\nexport const useExample = (\n  bootstrap: (canvas: HTMLCanvasElement) => any,\n  code: string,\n  name: string,\n) => {\n  const ref = useRef<{ canvas: HTMLCanvasElement }>(null);\n  useEffect(() => bootstrap(ref.current!.canvas), []);\n  return <Example ref={ref} code={code} name={name} />\n}","import * as Athena from 'athena3d';\nimport { useExample } from '../components/Example';\n\nconst bootstrap = (canvas: HTMLCanvasElement) => {\n\n  const CUBE_COUNT = 100;\n\n  const camera = new Athena.PerspectiveCamera({\n    position: new Athena.Vector3(10, 10, 10),\n    lookAt: new Athena.Vector3(0, 0, 0),\n    fov: 60\n  });\n  const renderer = new Athena.Renderer({ canvas, camera });\n  \n  const random = () => (Math.random() - 0.5) * 20;\n  const cubes: Athena.Mesh[] = [];\n\n  for (let x = 0; x < CUBE_COUNT; x++) {\n    const cube = new Athena.Mesh({\n      geometry: new Athena.CubeGeometry(),\n      material: new Athena.NormalMaterial()\n    });\n    cube.position.set(random(), random(), random());\n    cube.rotation.set(random(), random(), random());\n    renderer.scene.add(cube);\n    cubes.push(cube);\n  }\n\n  renderer.onUpdate(() => {\n    renderer.scene.rotation.y = Date.now() / 1000;\n  });\n  \n  renderer.start();\n\n  return () => {\n    renderer.stop();\n    renderer.destroy();\n  }\n  \n}\n\nconst code = `import * as Athena from 'athena3d';\n\nexport const bootstrap = (canvas: HTMLCanvasElement) => {\n\n  const CUBE_COUNT = 100;\n\n  const camera = new Athena.PerspectiveCamera({\n    position: new Athena.Vector3(10, 10, 10),\n    lookAt: new Athena.Vector3(0, 0, 0),\n    fov: 60\n  });\n  const renderer = new Athena.Renderer({ canvas, camera });\n  \n  const random = () => (Math.random() - 0.5) * 20;\n  const cubes: Athena.Mesh[] = [];\n\n  for (let x = 0; x < CUBE_COUNT; x++) {\n    const cube = new Athena.Mesh({\n      geometry: new Athena.CubeGeometry(),\n      material: new Athena.NormalMaterial()\n    });\n    cube.position.set(random(), random(), random());\n    cube.rotation.set(random(), random(), random());\n    renderer.scene.add(cube);\n    cubes.push(cube);\n  }\n\n  renderer.onUpdate(() => {\n    renderer.scene.rotation.y = Date.now() / 1000;\n  });\n  \n  renderer.start();\n\n  return () => {\n    renderer.stop();\n    renderer.destroy();\n  }\n  \n}`;\n\nexport default () => useExample(bootstrap, code, 'rotating_cubes.ts');"],"names":["Example","React","ref","code","name","canvasRef","useRef","useReducer","s","isActive","toggleActive","useImperativeHandle","canvas","current","style","height","overflow","className","onClick","Icon","type","marginRight","tomorrowNightBright","language","showLineNumbers","customStyle","fontFamily","fontSize","position","lineHeight","top","left","right","bottom","opacity","pointerEvents","transition","useExample","bootstrap","useEffect","camera","Athena","lookAt","fov","renderer","random","Math","cubes","x","cube","geometry","material","set","rotation","scene","add","push","onUpdate","y","Date","now","start","stop","destroy"],"sourceRoot":""}